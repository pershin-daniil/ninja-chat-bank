# https://taskfile.dev
version: '3'

silent: true

vars:
  GO_MODULE: github.com/pershin-daniil/ninja-chat-bank
  GO_FILES:
    sh: find . -type f -name '*.go' -not -path "./vendor/*" -not -path "./internal/store/*" -not -path "*.gen.go" | tr "\n" " "

  GOLANGCI_LINT_VERSION: v1.56.2
  GOLANGCI_LINT_CACHE:
    sh: echo "$HOME/.cache"

  TOOLS_DIR:
    sh: echo "`pwd`/bin/tools"

  DEV_TOOLS: |
    github.com/daixiang0/gci@v0.13.1
    github.com/kazhuravlev/options-gen/cmd/options-gen@v0.32.0
    mvdan.cc/gofumpt@v0.6.0
    entgo.io/ent/cmd/ent@v0.11.10


  DOCKER_COMPOSE_PATHS: |
    ./deploy/local/docker-compose.yml
    ./deploy/local/docker-compose.sentry.yml

  DOCKER_COMPOSE_CMD: docker compose{{range $i, $path := .DOCKER_COMPOSE_PATHS | trim | splitLines -}}{{printf " -f %q" $path}}{{end}}

  TYPES: |
    ChatID
    MessageID
    ProblemID
    UserID
  TYPES_PKG: types
  TYPES_DST: ./internal/types/types.gen.go

  ENT_SCHEMA: ./internal/store/schema


tasks:
  default:
    cmds:
      - task: tidy
      - task: fmt
      - task: lint
      - task: tests
      - task: build

  tidy:
    - echo "- Tidy"
    - go mod tidy
    - task: vendor

  vendor:
    - echo "- Vendor"
    - go mod vendor

  fmt:
    - echo "- Format"
    - |
      export PATH="${PATH}:{{.TOOLS_DIR}}"
      gofumpt -w {{.GO_FILES}}
      gci write {{.GO_FILES}} --custom-order -s standard -s default -s "Prefix({{.GO_MODULE}})" 2> /dev/null

  lint:
    cmds:
      - echo "- Lint"
      - mkdir -p {{.GOLANGCI_LINT_CACHE}}
      - task: lint:cmd
        vars: { CLI_ARGS: "run -v --fix --timeout=5m ./..." }

  lint:cmd:
    cmds:
      - |
        docker run --rm \
          -v "$(pwd):/app" -w /app \
          -v "{{.GOLANGCI_LINT_CACHE}}:/root/.cache" \
          golangci/golangci-lint:{{.GOLANGCI_LINT_VERSION}} \
          golangci-lint {{.CLI_ARGS}}

  tests:
    cmds:
      - echo "- Tests"
      - go test -race ./...

  tests:integration:
    env:
      TEST_LOG_LEVEL: info
      TEST_KEYCLOAK_REALM: Bank
      TEST_KEYCLOAK_CLIENT_ID: integration-testing
      TEST_KEYCLOAK_CLIENT_SECRET: biq7WcbKHgVaalqZDlhqINEi1yGK6aOw
      TEST_KEYCLOAK_TEST_USER: integration_testing
      TEST_KEYCLOAK_TEST_PASSWORD: integration_testing
    cmds:
      - echo "- Integration tests"
      - go test -tags integration -count 1 -race ./...

  kc:export:
    cmds:
      - echo "- Exporting realm"
      - "{{.DOCKER_COMPOSE_CMD}} exec keycloak /opt/keycloak/bin/kc.sh export \
          --realm Bank \
          --file /dev/stdout > ./deploy/local/keycloak-bank-realm.json"

  build:
    cmds:
      - echo "- Build"
      - go build ./cmd/chat-service

  dev-tools:install:
    dir: "{{.TOOLS_DIR}}"
    cmds:
      - echo "- Install dev tools"
      - |
        export GOBIN="{{.TOOLS_DIR}}"
        {{range $i, $tool := .DEV_TOOLS | trim | splitLines -}}
          go install {{$tool}}
        {{end}}
      - ls -l "{{.TOOLS_DIR}}"

  generate:
    - echo "- Run go generate..."
    - export PATH="${PATH}:{{.TOOLS_DIR}}" && go generate ./...
    - task: gen:types
    - task: ent:gen

  gen:types:
    cmds:
      - echo "- Generate types..."
      - go run ./cmd/gen-types types {{range $i, $type := .TYPES | trim | splitLines}}{{$type}},{{end}} internal/types/types.gen.go

  ent:new:
    cmds:
      - go run -mod=mod entgo.io/ent/cmd/ent new --target ./internal/store/schema {{$.CLI_ARGS}}
      - task: tidy

  ent:gen:
    cmds:
      - go run -mod=mod entgo.io/ent/cmd/ent generate --feature sql/upsert,sql/lock {{.ENT_SCHEMA}}
      - task: tidy

  deps:
    cmds:
      - echo "- Run deps containers"
      - "{{.DOCKER_COMPOSE_CMD}} up -d"

  deps:cmd:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{.CLI_ARGS}}"

  deps:status:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}}  ps"

  deps:logs:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} logs {{.CLI_ARGS}}"

  deps:stop:
    cmds:
      - echo "- Stop deps containers"
      - "{{.DOCKER_COMPOSE_CMD}} stop"

  deps:reset-psql:
    cmds:
      - task: deps:reset
        vars:
          SERVICE: postgres

  deps:reset-sentry:
    cmds:
      - task: deps:reset
        vars:
          SERVICE: sentry sentry-worker cron redis

  deps:reset:
    internal: true
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} rm -fsv {{.SERVICE}}"
      - "{{.DOCKER_COMPOSE_CMD}} up -d {{.SERVICE}}"

