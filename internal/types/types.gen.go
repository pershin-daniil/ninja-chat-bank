// Code generated by cmd/gen-types; DO NOT EDIT.
package types

import (
	"database/sql/driver"
	"errors"

	"github.com/google/uuid"
)

var ChatIDNil = ChatID(uuid.Nil)

type ChatID uuid.UUID

func NewChatID() ChatID                           { return ChatID(uuid.New()) }
func (t ChatID) String() string                   { return uuid.UUID(t).String() }
func (t ChatID) Value() (driver.Value, error)     { return t.String(), nil }
func (t *ChatID) Scan(src any) error              { return (*uuid.UUID)(t).Scan(src) }
func (t ChatID) MarshalText() ([]byte, error)     { return uuid.UUID(t).MarshalText() }
func (t *ChatID) UnmarshalText(data []byte) error { return (*uuid.UUID)(t).UnmarshalText(data) }
func (t ChatID) IsZero() bool                     { return t == ChatIDNil }
func (t ChatID) Matches(x any) bool {
	v, ok := x.(ChatID)
	if !ok {
		return false
	}
	return t.String() == v.String()
}
func (t ChatID) Validate() error {
	if t.IsZero() {
		return errors.New("zero ChatID")
	}
	return nil
}

var EventIDNil = EventID(uuid.Nil)

type EventID uuid.UUID

func NewEventID() EventID                          { return EventID(uuid.New()) }
func (t EventID) String() string                   { return uuid.UUID(t).String() }
func (t EventID) Value() (driver.Value, error)     { return t.String(), nil }
func (t *EventID) Scan(src any) error              { return (*uuid.UUID)(t).Scan(src) }
func (t EventID) MarshalText() ([]byte, error)     { return uuid.UUID(t).MarshalText() }
func (t *EventID) UnmarshalText(data []byte) error { return (*uuid.UUID)(t).UnmarshalText(data) }
func (t EventID) IsZero() bool                     { return t == EventIDNil }
func (t EventID) Matches(x any) bool {
	v, ok := x.(EventID)
	if !ok {
		return false
	}
	return t.String() == v.String()
}
func (t EventID) Validate() error {
	if t.IsZero() {
		return errors.New("zero EventID")
	}
	return nil
}

var FailedJobIDNil = FailedJobID(uuid.Nil)

type FailedJobID uuid.UUID

func NewFailedJobID() FailedJobID                      { return FailedJobID(uuid.New()) }
func (t FailedJobID) String() string                   { return uuid.UUID(t).String() }
func (t FailedJobID) Value() (driver.Value, error)     { return t.String(), nil }
func (t *FailedJobID) Scan(src any) error              { return (*uuid.UUID)(t).Scan(src) }
func (t FailedJobID) MarshalText() ([]byte, error)     { return uuid.UUID(t).MarshalText() }
func (t *FailedJobID) UnmarshalText(data []byte) error { return (*uuid.UUID)(t).UnmarshalText(data) }
func (t FailedJobID) IsZero() bool                     { return t == FailedJobIDNil }
func (t FailedJobID) Matches(x any) bool {
	v, ok := x.(FailedJobID)
	if !ok {
		return false
	}
	return t.String() == v.String()
}
func (t FailedJobID) Validate() error {
	if t.IsZero() {
		return errors.New("zero FailedJobID")
	}
	return nil
}

var JobIDNil = JobID(uuid.Nil)

type JobID uuid.UUID

func NewJobID() JobID                            { return JobID(uuid.New()) }
func (t JobID) String() string                   { return uuid.UUID(t).String() }
func (t JobID) Value() (driver.Value, error)     { return t.String(), nil }
func (t *JobID) Scan(src any) error              { return (*uuid.UUID)(t).Scan(src) }
func (t JobID) MarshalText() ([]byte, error)     { return uuid.UUID(t).MarshalText() }
func (t *JobID) UnmarshalText(data []byte) error { return (*uuid.UUID)(t).UnmarshalText(data) }
func (t JobID) IsZero() bool                     { return t == JobIDNil }
func (t JobID) Matches(x any) bool {
	v, ok := x.(JobID)
	if !ok {
		return false
	}
	return t.String() == v.String()
}
func (t JobID) Validate() error {
	if t.IsZero() {
		return errors.New("zero JobID")
	}
	return nil
}

var MessageIDNil = MessageID(uuid.Nil)

type MessageID uuid.UUID

func NewMessageID() MessageID                        { return MessageID(uuid.New()) }
func (t MessageID) String() string                   { return uuid.UUID(t).String() }
func (t MessageID) Value() (driver.Value, error)     { return t.String(), nil }
func (t *MessageID) Scan(src any) error              { return (*uuid.UUID)(t).Scan(src) }
func (t MessageID) MarshalText() ([]byte, error)     { return uuid.UUID(t).MarshalText() }
func (t *MessageID) UnmarshalText(data []byte) error { return (*uuid.UUID)(t).UnmarshalText(data) }
func (t MessageID) IsZero() bool                     { return t == MessageIDNil }
func (t MessageID) Matches(x any) bool {
	v, ok := x.(MessageID)
	if !ok {
		return false
	}
	return t.String() == v.String()
}
func (t MessageID) Validate() error {
	if t.IsZero() {
		return errors.New("zero MessageID")
	}
	return nil
}

var ProblemIDNil = ProblemID(uuid.Nil)

type ProblemID uuid.UUID

func NewProblemID() ProblemID                        { return ProblemID(uuid.New()) }
func (t ProblemID) String() string                   { return uuid.UUID(t).String() }
func (t ProblemID) Value() (driver.Value, error)     { return t.String(), nil }
func (t *ProblemID) Scan(src any) error              { return (*uuid.UUID)(t).Scan(src) }
func (t ProblemID) MarshalText() ([]byte, error)     { return uuid.UUID(t).MarshalText() }
func (t *ProblemID) UnmarshalText(data []byte) error { return (*uuid.UUID)(t).UnmarshalText(data) }
func (t ProblemID) IsZero() bool                     { return t == ProblemIDNil }
func (t ProblemID) Matches(x any) bool {
	v, ok := x.(ProblemID)
	if !ok {
		return false
	}
	return t.String() == v.String()
}
func (t ProblemID) Validate() error {
	if t.IsZero() {
		return errors.New("zero ProblemID")
	}
	return nil
}

var RequestIDNil = RequestID(uuid.Nil)

type RequestID uuid.UUID

func NewRequestID() RequestID                        { return RequestID(uuid.New()) }
func (t RequestID) String() string                   { return uuid.UUID(t).String() }
func (t RequestID) Value() (driver.Value, error)     { return t.String(), nil }
func (t *RequestID) Scan(src any) error              { return (*uuid.UUID)(t).Scan(src) }
func (t RequestID) MarshalText() ([]byte, error)     { return uuid.UUID(t).MarshalText() }
func (t *RequestID) UnmarshalText(data []byte) error { return (*uuid.UUID)(t).UnmarshalText(data) }
func (t RequestID) IsZero() bool                     { return t == RequestIDNil }
func (t RequestID) Matches(x any) bool {
	v, ok := x.(RequestID)
	if !ok {
		return false
	}
	return t.String() == v.String()
}
func (t RequestID) Validate() error {
	if t.IsZero() {
		return errors.New("zero RequestID")
	}
	return nil
}

var UserIDNil = UserID(uuid.Nil)

type UserID uuid.UUID

func NewUserID() UserID                           { return UserID(uuid.New()) }
func (t UserID) String() string                   { return uuid.UUID(t).String() }
func (t UserID) Value() (driver.Value, error)     { return t.String(), nil }
func (t *UserID) Scan(src any) error              { return (*uuid.UUID)(t).Scan(src) }
func (t UserID) MarshalText() ([]byte, error)     { return uuid.UUID(t).MarshalText() }
func (t *UserID) UnmarshalText(data []byte) error { return (*uuid.UUID)(t).UnmarshalText(data) }
func (t UserID) IsZero() bool                     { return t == UserIDNil }
func (t UserID) Matches(x any) bool {
	v, ok := x.(UserID)
	if !ok {
		return false
	}
	return t.String() == v.String()
}
func (t UserID) Validate() error {
	if t.IsZero() {
		return errors.New("zero UserID")
	}
	return nil
}

type TypeSet = interface {
	ChatID | EventID | FailedJobID | JobID | MessageID | ProblemID | RequestID | UserID
}

func Parse[T TypeSet](s string) (T, error) {
	v, err := uuid.Parse(s)
	return T(v), err
}

func MustParse[T TypeSet](s string) T {
	return T(uuid.MustParse(s))
}
