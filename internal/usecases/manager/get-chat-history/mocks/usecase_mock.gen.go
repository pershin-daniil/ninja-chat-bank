// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=mocks/usecase_mock.gen.go -typed -package=getchathistorymocks
//

// Package getchathistorymocks is a generated GoMock package.
package getchathistorymocks

import (
	context "context"
	reflect "reflect"

	messagesrepo "github.com/pershin-daniil/ninja-chat-bank/internal/repositories/messages"
	problemsrepo "github.com/pershin-daniil/ninja-chat-bank/internal/repositories/problems"
	types "github.com/pershin-daniil/ninja-chat-bank/internal/types"
	gomock "go.uber.org/mock/gomock"
)

// MockmessagesRepository is a mock of messagesRepository interface.
type MockmessagesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockmessagesRepositoryMockRecorder
}

// MockmessagesRepositoryMockRecorder is the mock recorder for MockmessagesRepository.
type MockmessagesRepositoryMockRecorder struct {
	mock *MockmessagesRepository
}

// NewMockmessagesRepository creates a new mock instance.
func NewMockmessagesRepository(ctrl *gomock.Controller) *MockmessagesRepository {
	mock := &MockmessagesRepository{ctrl: ctrl}
	mock.recorder = &MockmessagesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessagesRepository) EXPECT() *MockmessagesRepositoryMockRecorder {
	return m.recorder
}

// GetProblemMessages mocks base method.
func (m *MockmessagesRepository) GetProblemMessages(ctx context.Context, problemID types.ProblemID, pageSize int, cursor *messagesrepo.Cursor) ([]messagesrepo.Message, *messagesrepo.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemMessages", ctx, problemID, pageSize, cursor)
	ret0, _ := ret[0].([]messagesrepo.Message)
	ret1, _ := ret[1].(*messagesrepo.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProblemMessages indicates an expected call of GetProblemMessages.
func (mr *MockmessagesRepositoryMockRecorder) GetProblemMessages(ctx, problemID, pageSize, cursor any) *MockmessagesRepositoryGetProblemMessagesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemMessages", reflect.TypeOf((*MockmessagesRepository)(nil).GetProblemMessages), ctx, problemID, pageSize, cursor)
	return &MockmessagesRepositoryGetProblemMessagesCall{Call: call}
}

// MockmessagesRepositoryGetProblemMessagesCall wrap *gomock.Call
type MockmessagesRepositoryGetProblemMessagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockmessagesRepositoryGetProblemMessagesCall) Return(arg0 []messagesrepo.Message, arg1 *messagesrepo.Cursor, arg2 error) *MockmessagesRepositoryGetProblemMessagesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockmessagesRepositoryGetProblemMessagesCall) Do(f func(context.Context, types.ProblemID, int, *messagesrepo.Cursor) ([]messagesrepo.Message, *messagesrepo.Cursor, error)) *MockmessagesRepositoryGetProblemMessagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockmessagesRepositoryGetProblemMessagesCall) DoAndReturn(f func(context.Context, types.ProblemID, int, *messagesrepo.Cursor) ([]messagesrepo.Message, *messagesrepo.Cursor, error)) *MockmessagesRepositoryGetProblemMessagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockproblemsRepo is a mock of problemsRepo interface.
type MockproblemsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockproblemsRepoMockRecorder
}

// MockproblemsRepoMockRecorder is the mock recorder for MockproblemsRepo.
type MockproblemsRepoMockRecorder struct {
	mock *MockproblemsRepo
}

// NewMockproblemsRepo creates a new mock instance.
func NewMockproblemsRepo(ctrl *gomock.Controller) *MockproblemsRepo {
	mock := &MockproblemsRepo{ctrl: ctrl}
	mock.recorder = &MockproblemsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproblemsRepo) EXPECT() *MockproblemsRepoMockRecorder {
	return m.recorder
}

// GetUnresolvedProblem mocks base method.
func (m *MockproblemsRepo) GetUnresolvedProblem(ctx context.Context, chatID types.ChatID, managerID types.UserID) (*problemsrepo.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnresolvedProblem", ctx, chatID, managerID)
	ret0, _ := ret[0].(*problemsrepo.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnresolvedProblem indicates an expected call of GetUnresolvedProblem.
func (mr *MockproblemsRepoMockRecorder) GetUnresolvedProblem(ctx, chatID, managerID any) *MockproblemsRepoGetUnresolvedProblemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnresolvedProblem", reflect.TypeOf((*MockproblemsRepo)(nil).GetUnresolvedProblem), ctx, chatID, managerID)
	return &MockproblemsRepoGetUnresolvedProblemCall{Call: call}
}

// MockproblemsRepoGetUnresolvedProblemCall wrap *gomock.Call
type MockproblemsRepoGetUnresolvedProblemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockproblemsRepoGetUnresolvedProblemCall) Return(arg0 *problemsrepo.Problem, arg1 error) *MockproblemsRepoGetUnresolvedProblemCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockproblemsRepoGetUnresolvedProblemCall) Do(f func(context.Context, types.ChatID, types.UserID) (*problemsrepo.Problem, error)) *MockproblemsRepoGetUnresolvedProblemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockproblemsRepoGetUnresolvedProblemCall) DoAndReturn(f func(context.Context, types.ChatID, types.UserID) (*problemsrepo.Problem, error)) *MockproblemsRepoGetUnresolvedProblemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
