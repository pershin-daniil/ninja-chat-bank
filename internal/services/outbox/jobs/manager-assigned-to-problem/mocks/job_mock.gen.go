// Code generated by MockGen. DO NOT EDIT.
// Source: job.go
//
// Generated by this command:
//
//	mockgen -source=job.go -destination=mocks/job_mock.gen.go -typed -package=managerassignedtoproblemjobmocks
//

// Package managerassignedtoproblemjobmocks is a generated GoMock package.
package managerassignedtoproblemjobmocks

import (
	context "context"
	reflect "reflect"

	messagesrepo "github.com/pershin-daniil/ninja-chat-bank/internal/repositories/messages"
	problemsrepo "github.com/pershin-daniil/ninja-chat-bank/internal/repositories/problems"
	eventstream "github.com/pershin-daniil/ninja-chat-bank/internal/services/event-stream"
	types "github.com/pershin-daniil/ninja-chat-bank/internal/types"
	gomock "go.uber.org/mock/gomock"
)

// MockproblemRepository is a mock of problemRepository interface.
type MockproblemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockproblemRepositoryMockRecorder
}

// MockproblemRepositoryMockRecorder is the mock recorder for MockproblemRepository.
type MockproblemRepositoryMockRecorder struct {
	mock *MockproblemRepository
}

// NewMockproblemRepository creates a new mock instance.
func NewMockproblemRepository(ctrl *gomock.Controller) *MockproblemRepository {
	mock := &MockproblemRepository{ctrl: ctrl}
	mock.recorder = &MockproblemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproblemRepository) EXPECT() *MockproblemRepositoryMockRecorder {
	return m.recorder
}

// GetProblemByID mocks base method.
func (m *MockproblemRepository) GetProblemByID(ctx context.Context, problemID types.ProblemID) (*problemsrepo.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemByID", ctx, problemID)
	ret0, _ := ret[0].(*problemsrepo.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemByID indicates an expected call of GetProblemByID.
func (mr *MockproblemRepositoryMockRecorder) GetProblemByID(ctx, problemID any) *MockproblemRepositoryGetProblemByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemByID", reflect.TypeOf((*MockproblemRepository)(nil).GetProblemByID), ctx, problemID)
	return &MockproblemRepositoryGetProblemByIDCall{Call: call}
}

// MockproblemRepositoryGetProblemByIDCall wrap *gomock.Call
type MockproblemRepositoryGetProblemByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockproblemRepositoryGetProblemByIDCall) Return(arg0 *problemsrepo.Problem, arg1 error) *MockproblemRepositoryGetProblemByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockproblemRepositoryGetProblemByIDCall) Do(f func(context.Context, types.ProblemID) (*problemsrepo.Problem, error)) *MockproblemRepositoryGetProblemByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockproblemRepositoryGetProblemByIDCall) DoAndReturn(f func(context.Context, types.ProblemID) (*problemsrepo.Problem, error)) *MockproblemRepositoryGetProblemByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockmessageRepository is a mock of messageRepository interface.
type MockmessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockmessageRepositoryMockRecorder
}

// MockmessageRepositoryMockRecorder is the mock recorder for MockmessageRepository.
type MockmessageRepositoryMockRecorder struct {
	mock *MockmessageRepository
}

// NewMockmessageRepository creates a new mock instance.
func NewMockmessageRepository(ctrl *gomock.Controller) *MockmessageRepository {
	mock := &MockmessageRepository{ctrl: ctrl}
	mock.recorder = &MockmessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageRepository) EXPECT() *MockmessageRepositoryMockRecorder {
	return m.recorder
}

// GetMessageByID mocks base method.
func (m *MockmessageRepository) GetMessageByID(ctx context.Context, msgID types.MessageID) (*messagesrepo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByID", ctx, msgID)
	ret0, _ := ret[0].(*messagesrepo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByID indicates an expected call of GetMessageByID.
func (mr *MockmessageRepositoryMockRecorder) GetMessageByID(ctx, msgID any) *MockmessageRepositoryGetMessageByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByID", reflect.TypeOf((*MockmessageRepository)(nil).GetMessageByID), ctx, msgID)
	return &MockmessageRepositoryGetMessageByIDCall{Call: call}
}

// MockmessageRepositoryGetMessageByIDCall wrap *gomock.Call
type MockmessageRepositoryGetMessageByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockmessageRepositoryGetMessageByIDCall) Return(arg0 *messagesrepo.Message, arg1 error) *MockmessageRepositoryGetMessageByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockmessageRepositoryGetMessageByIDCall) Do(f func(context.Context, types.MessageID) (*messagesrepo.Message, error)) *MockmessageRepositoryGetMessageByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockmessageRepositoryGetMessageByIDCall) DoAndReturn(f func(context.Context, types.MessageID) (*messagesrepo.Message, error)) *MockmessageRepositoryGetMessageByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockmanagerLoadService is a mock of managerLoadService interface.
type MockmanagerLoadService struct {
	ctrl     *gomock.Controller
	recorder *MockmanagerLoadServiceMockRecorder
}

// MockmanagerLoadServiceMockRecorder is the mock recorder for MockmanagerLoadService.
type MockmanagerLoadServiceMockRecorder struct {
	mock *MockmanagerLoadService
}

// NewMockmanagerLoadService creates a new mock instance.
func NewMockmanagerLoadService(ctrl *gomock.Controller) *MockmanagerLoadService {
	mock := &MockmanagerLoadService{ctrl: ctrl}
	mock.recorder = &MockmanagerLoadServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmanagerLoadService) EXPECT() *MockmanagerLoadServiceMockRecorder {
	return m.recorder
}

// CanManagerTakeProblem mocks base method.
func (m *MockmanagerLoadService) CanManagerTakeProblem(ctx context.Context, managerID types.UserID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanManagerTakeProblem", ctx, managerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanManagerTakeProblem indicates an expected call of CanManagerTakeProblem.
func (mr *MockmanagerLoadServiceMockRecorder) CanManagerTakeProblem(ctx, managerID any) *MockmanagerLoadServiceCanManagerTakeProblemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanManagerTakeProblem", reflect.TypeOf((*MockmanagerLoadService)(nil).CanManagerTakeProblem), ctx, managerID)
	return &MockmanagerLoadServiceCanManagerTakeProblemCall{Call: call}
}

// MockmanagerLoadServiceCanManagerTakeProblemCall wrap *gomock.Call
type MockmanagerLoadServiceCanManagerTakeProblemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockmanagerLoadServiceCanManagerTakeProblemCall) Return(arg0 bool, arg1 error) *MockmanagerLoadServiceCanManagerTakeProblemCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockmanagerLoadServiceCanManagerTakeProblemCall) Do(f func(context.Context, types.UserID) (bool, error)) *MockmanagerLoadServiceCanManagerTakeProblemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockmanagerLoadServiceCanManagerTakeProblemCall) DoAndReturn(f func(context.Context, types.UserID) (bool, error)) *MockmanagerLoadServiceCanManagerTakeProblemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockeventStream is a mock of eventStream interface.
type MockeventStream struct {
	ctrl     *gomock.Controller
	recorder *MockeventStreamMockRecorder
}

// MockeventStreamMockRecorder is the mock recorder for MockeventStream.
type MockeventStreamMockRecorder struct {
	mock *MockeventStream
}

// NewMockeventStream creates a new mock instance.
func NewMockeventStream(ctrl *gomock.Controller) *MockeventStream {
	mock := &MockeventStream{ctrl: ctrl}
	mock.recorder = &MockeventStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockeventStream) EXPECT() *MockeventStreamMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockeventStream) Publish(ctx context.Context, userID types.UserID, event eventstream.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, userID, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockeventStreamMockRecorder) Publish(ctx, userID, event any) *MockeventStreamPublishCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockeventStream)(nil).Publish), ctx, userID, event)
	return &MockeventStreamPublishCall{Call: call}
}

// MockeventStreamPublishCall wrap *gomock.Call
type MockeventStreamPublishCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockeventStreamPublishCall) Return(arg0 error) *MockeventStreamPublishCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockeventStreamPublishCall) Do(f func(context.Context, types.UserID, eventstream.Event) error) *MockeventStreamPublishCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockeventStreamPublishCall) DoAndReturn(f func(context.Context, types.UserID, eventstream.Event) error) *MockeventStreamPublishCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
