// Code generated by MockGen. DO NOT EDIT.
// Source: job.go
//
// Generated by this command:
//
//	mockgen -source=job.go -destination=mocks/job_mock.gen.go -typed -package=managerassignedtoproblemjobmocks
//

// Package managerassignedtoproblemjobmocks is a generated GoMock package.
package managerassignedtoproblemjobmocks

import (
	context "context"
	reflect "reflect"

	messagesrepo "github.com/pershin-daniil/ninja-chat-bank/internal/repositories/messages"
	problemsrepo "github.com/pershin-daniil/ninja-chat-bank/internal/repositories/problems"
	eventstream "github.com/pershin-daniil/ninja-chat-bank/internal/services/event-stream"
	types "github.com/pershin-daniil/ninja-chat-bank/internal/types"
	gomock "go.uber.org/mock/gomock"
)

// MockproblemsRepository is a mock of problemsRepository interface.
type MockproblemsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockproblemsRepositoryMockRecorder
}

// MockproblemsRepositoryMockRecorder is the mock recorder for MockproblemsRepository.
type MockproblemsRepositoryMockRecorder struct {
	mock *MockproblemsRepository
}

// NewMockproblemsRepository creates a new mock instance.
func NewMockproblemsRepository(ctrl *gomock.Controller) *MockproblemsRepository {
	mock := &MockproblemsRepository{ctrl: ctrl}
	mock.recorder = &MockproblemsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproblemsRepository) EXPECT() *MockproblemsRepositoryMockRecorder {
	return m.recorder
}

// ResolveAssignedProblem mocks base method.
func (m *MockproblemsRepository) ResolveAssignedProblem(ctx context.Context, chatID types.ChatID, managerID types.UserID) (*problemsrepo.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveAssignedProblem", ctx, chatID, managerID)
	ret0, _ := ret[0].(*problemsrepo.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveAssignedProblem indicates an expected call of ResolveAssignedProblem.
func (mr *MockproblemsRepositoryMockRecorder) ResolveAssignedProblem(ctx, chatID, managerID any) *MockproblemsRepositoryResolveAssignedProblemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveAssignedProblem", reflect.TypeOf((*MockproblemsRepository)(nil).ResolveAssignedProblem), ctx, chatID, managerID)
	return &MockproblemsRepositoryResolveAssignedProblemCall{Call: call}
}

// MockproblemsRepositoryResolveAssignedProblemCall wrap *gomock.Call
type MockproblemsRepositoryResolveAssignedProblemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockproblemsRepositoryResolveAssignedProblemCall) Return(arg0 *problemsrepo.Problem, arg1 error) *MockproblemsRepositoryResolveAssignedProblemCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockproblemsRepositoryResolveAssignedProblemCall) Do(f func(context.Context, types.ChatID, types.UserID) (*problemsrepo.Problem, error)) *MockproblemsRepositoryResolveAssignedProblemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockproblemsRepositoryResolveAssignedProblemCall) DoAndReturn(f func(context.Context, types.ChatID, types.UserID) (*problemsrepo.Problem, error)) *MockproblemsRepositoryResolveAssignedProblemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockeventStream is a mock of eventStream interface.
type MockeventStream struct {
	ctrl     *gomock.Controller
	recorder *MockeventStreamMockRecorder
}

// MockeventStreamMockRecorder is the mock recorder for MockeventStream.
type MockeventStreamMockRecorder struct {
	mock *MockeventStream
}

// NewMockeventStream creates a new mock instance.
func NewMockeventStream(ctrl *gomock.Controller) *MockeventStream {
	mock := &MockeventStream{ctrl: ctrl}
	mock.recorder = &MockeventStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockeventStream) EXPECT() *MockeventStreamMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockeventStream) Publish(ctx context.Context, userID types.UserID, event eventstream.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, userID, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockeventStreamMockRecorder) Publish(ctx, userID, event any) *MockeventStreamPublishCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockeventStream)(nil).Publish), ctx, userID, event)
	return &MockeventStreamPublishCall{Call: call}
}

// MockeventStreamPublishCall wrap *gomock.Call
type MockeventStreamPublishCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockeventStreamPublishCall) Return(arg0 error) *MockeventStreamPublishCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockeventStreamPublishCall) Do(f func(context.Context, types.UserID, eventstream.Event) error) *MockeventStreamPublishCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockeventStreamPublishCall) DoAndReturn(f func(context.Context, types.UserID, eventstream.Event) error) *MockeventStreamPublishCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockmessagesRepository is a mock of messagesRepository interface.
type MockmessagesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockmessagesRepositoryMockRecorder
}

// MockmessagesRepositoryMockRecorder is the mock recorder for MockmessagesRepository.
type MockmessagesRepositoryMockRecorder struct {
	mock *MockmessagesRepository
}

// NewMockmessagesRepository creates a new mock instance.
func NewMockmessagesRepository(ctrl *gomock.Controller) *MockmessagesRepository {
	mock := &MockmessagesRepository{ctrl: ctrl}
	mock.recorder = &MockmessagesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessagesRepository) EXPECT() *MockmessagesRepositoryMockRecorder {
	return m.recorder
}

// GetMessageByID mocks base method.
func (m *MockmessagesRepository) GetMessageByID(ctx context.Context, msgID types.MessageID) (*messagesrepo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByID", ctx, msgID)
	ret0, _ := ret[0].(*messagesrepo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByID indicates an expected call of GetMessageByID.
func (mr *MockmessagesRepositoryMockRecorder) GetMessageByID(ctx, msgID any) *MockmessagesRepositoryGetMessageByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByID", reflect.TypeOf((*MockmessagesRepository)(nil).GetMessageByID), ctx, msgID)
	return &MockmessagesRepositoryGetMessageByIDCall{Call: call}
}

// MockmessagesRepositoryGetMessageByIDCall wrap *gomock.Call
type MockmessagesRepositoryGetMessageByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockmessagesRepositoryGetMessageByIDCall) Return(arg0 *messagesrepo.Message, arg1 error) *MockmessagesRepositoryGetMessageByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockmessagesRepositoryGetMessageByIDCall) Do(f func(context.Context, types.MessageID) (*messagesrepo.Message, error)) *MockmessagesRepositoryGetMessageByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockmessagesRepositoryGetMessageByIDCall) DoAndReturn(f func(context.Context, types.MessageID) (*messagesrepo.Message, error)) *MockmessagesRepositoryGetMessageByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
