// Code generated by MockGen. DO NOT EDIT.
// Source: job.go
//
// Generated by this command:
//
//	mockgen -source=job.go -destination=mocks/job_mock.gen.go -typed -package=sendmanagermessagejobmocks
//

// Package sendmanagermessagejobmocks is a generated GoMock package.
package sendmanagermessagejobmocks

import (
	context "context"
	reflect "reflect"

	messagesrepo "github.com/pershin-daniil/ninja-chat-bank/internal/repositories/messages"
	eventstream "github.com/pershin-daniil/ninja-chat-bank/internal/services/event-stream"
	msgproducer "github.com/pershin-daniil/ninja-chat-bank/internal/services/msg-producer"
	types "github.com/pershin-daniil/ninja-chat-bank/internal/types"
	gomock "go.uber.org/mock/gomock"
)

// MockmessageProducer is a mock of messageProducer interface.
type MockmessageProducer struct {
	ctrl     *gomock.Controller
	recorder *MockmessageProducerMockRecorder
}

// MockmessageProducerMockRecorder is the mock recorder for MockmessageProducer.
type MockmessageProducerMockRecorder struct {
	mock *MockmessageProducer
}

// NewMockmessageProducer creates a new mock instance.
func NewMockmessageProducer(ctrl *gomock.Controller) *MockmessageProducer {
	mock := &MockmessageProducer{ctrl: ctrl}
	mock.recorder = &MockmessageProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageProducer) EXPECT() *MockmessageProducerMockRecorder {
	return m.recorder
}

// ProduceMessage mocks base method.
func (m *MockmessageProducer) ProduceMessage(ctx context.Context, message msgproducer.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceMessage indicates an expected call of ProduceMessage.
func (mr *MockmessageProducerMockRecorder) ProduceMessage(ctx, message any) *MockmessageProducerProduceMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceMessage", reflect.TypeOf((*MockmessageProducer)(nil).ProduceMessage), ctx, message)
	return &MockmessageProducerProduceMessageCall{Call: call}
}

// MockmessageProducerProduceMessageCall wrap *gomock.Call
type MockmessageProducerProduceMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockmessageProducerProduceMessageCall) Return(arg0 error) *MockmessageProducerProduceMessageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockmessageProducerProduceMessageCall) Do(f func(context.Context, msgproducer.Message) error) *MockmessageProducerProduceMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockmessageProducerProduceMessageCall) DoAndReturn(f func(context.Context, msgproducer.Message) error) *MockmessageProducerProduceMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockmessagesRepository is a mock of messagesRepository interface.
type MockmessagesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockmessagesRepositoryMockRecorder
}

// MockmessagesRepositoryMockRecorder is the mock recorder for MockmessagesRepository.
type MockmessagesRepositoryMockRecorder struct {
	mock *MockmessagesRepository
}

// NewMockmessagesRepository creates a new mock instance.
func NewMockmessagesRepository(ctrl *gomock.Controller) *MockmessagesRepository {
	mock := &MockmessagesRepository{ctrl: ctrl}
	mock.recorder = &MockmessagesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessagesRepository) EXPECT() *MockmessagesRepositoryMockRecorder {
	return m.recorder
}

// GetMessageByID mocks base method.
func (m *MockmessagesRepository) GetMessageByID(ctx context.Context, msgID types.MessageID) (*messagesrepo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByID", ctx, msgID)
	ret0, _ := ret[0].(*messagesrepo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByID indicates an expected call of GetMessageByID.
func (mr *MockmessagesRepositoryMockRecorder) GetMessageByID(ctx, msgID any) *MockmessagesRepositoryGetMessageByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByID", reflect.TypeOf((*MockmessagesRepository)(nil).GetMessageByID), ctx, msgID)
	return &MockmessagesRepositoryGetMessageByIDCall{Call: call}
}

// MockmessagesRepositoryGetMessageByIDCall wrap *gomock.Call
type MockmessagesRepositoryGetMessageByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockmessagesRepositoryGetMessageByIDCall) Return(arg0 *messagesrepo.Message, arg1 error) *MockmessagesRepositoryGetMessageByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockmessagesRepositoryGetMessageByIDCall) Do(f func(context.Context, types.MessageID) (*messagesrepo.Message, error)) *MockmessagesRepositoryGetMessageByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockmessagesRepositoryGetMessageByIDCall) DoAndReturn(f func(context.Context, types.MessageID) (*messagesrepo.Message, error)) *MockmessagesRepositoryGetMessageByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockchatsRepository is a mock of chatsRepository interface.
type MockchatsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockchatsRepositoryMockRecorder
}

// MockchatsRepositoryMockRecorder is the mock recorder for MockchatsRepository.
type MockchatsRepositoryMockRecorder struct {
	mock *MockchatsRepository
}

// NewMockchatsRepository creates a new mock instance.
func NewMockchatsRepository(ctrl *gomock.Controller) *MockchatsRepository {
	mock := &MockchatsRepository{ctrl: ctrl}
	mock.recorder = &MockchatsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockchatsRepository) EXPECT() *MockchatsRepositoryMockRecorder {
	return m.recorder
}

// GetClientIDByChatID mocks base method.
func (m *MockchatsRepository) GetClientIDByChatID(ctx context.Context, chatID types.ChatID) (types.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientIDByChatID", ctx, chatID)
	ret0, _ := ret[0].(types.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientIDByChatID indicates an expected call of GetClientIDByChatID.
func (mr *MockchatsRepositoryMockRecorder) GetClientIDByChatID(ctx, chatID any) *MockchatsRepositoryGetClientIDByChatIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientIDByChatID", reflect.TypeOf((*MockchatsRepository)(nil).GetClientIDByChatID), ctx, chatID)
	return &MockchatsRepositoryGetClientIDByChatIDCall{Call: call}
}

// MockchatsRepositoryGetClientIDByChatIDCall wrap *gomock.Call
type MockchatsRepositoryGetClientIDByChatIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockchatsRepositoryGetClientIDByChatIDCall) Return(arg0 types.UserID, arg1 error) *MockchatsRepositoryGetClientIDByChatIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockchatsRepositoryGetClientIDByChatIDCall) Do(f func(context.Context, types.ChatID) (types.UserID, error)) *MockchatsRepositoryGetClientIDByChatIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockchatsRepositoryGetClientIDByChatIDCall) DoAndReturn(f func(context.Context, types.ChatID) (types.UserID, error)) *MockchatsRepositoryGetClientIDByChatIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockeventStream is a mock of eventStream interface.
type MockeventStream struct {
	ctrl     *gomock.Controller
	recorder *MockeventStreamMockRecorder
}

// MockeventStreamMockRecorder is the mock recorder for MockeventStream.
type MockeventStreamMockRecorder struct {
	mock *MockeventStream
}

// NewMockeventStream creates a new mock instance.
func NewMockeventStream(ctrl *gomock.Controller) *MockeventStream {
	mock := &MockeventStream{ctrl: ctrl}
	mock.recorder = &MockeventStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockeventStream) EXPECT() *MockeventStreamMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockeventStream) Publish(ctx context.Context, userID types.UserID, event eventstream.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, userID, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockeventStreamMockRecorder) Publish(ctx, userID, event any) *MockeventStreamPublishCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockeventStream)(nil).Publish), ctx, userID, event)
	return &MockeventStreamPublishCall{Call: call}
}

// MockeventStreamPublishCall wrap *gomock.Call
type MockeventStreamPublishCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockeventStreamPublishCall) Return(arg0 error) *MockeventStreamPublishCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockeventStreamPublishCall) Do(f func(context.Context, types.UserID, eventstream.Event) error) *MockeventStreamPublishCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockeventStreamPublishCall) DoAndReturn(f func(context.Context, types.UserID, eventstream.Event) error) *MockeventStreamPublishCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
