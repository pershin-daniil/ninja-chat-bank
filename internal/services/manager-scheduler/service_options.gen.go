// Code generated by options-gen. DO NOT EDIT.
package managerscheduler

import (
	fmt461e464ebed9 "fmt"
	"time"

	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
	validator461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/validator"
	managerpool "github.com/pershin-daniil/ninja-chat-bank/internal/services/manager-pool"
	"go.uber.org/zap"
)

type OptOptionsSetter func(o *Options)

func NewOptions(
	idleDuration time.Duration,
	mngrPool managerpool.Pool,
	msgRepo messagesRepo,
	outbox outboxService,
	problemsRepo problemsRepo,
	txtor transactor,
	log *zap.Logger,
	options ...OptOptionsSetter,
) Options {
	o := Options{}

	// Setting defaults from field tag (if present)

	o.idleDuration = idleDuration
	o.mngrPool = mngrPool
	o.msgRepo = msgRepo
	o.outbox = outbox
	o.problemsRepo = problemsRepo
	o.txtor = txtor
	o.log = log

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func (o *Options) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)
	errs.Add(errors461e464ebed9.NewValidationError("idleDuration", _validate_Options_idleDuration(o)))
	errs.Add(errors461e464ebed9.NewValidationError("mngrPool", _validate_Options_mngrPool(o)))
	errs.Add(errors461e464ebed9.NewValidationError("msgRepo", _validate_Options_msgRepo(o)))
	errs.Add(errors461e464ebed9.NewValidationError("outbox", _validate_Options_outbox(o)))
	errs.Add(errors461e464ebed9.NewValidationError("problemsRepo", _validate_Options_problemsRepo(o)))
	errs.Add(errors461e464ebed9.NewValidationError("txtor", _validate_Options_txtor(o)))
	errs.Add(errors461e464ebed9.NewValidationError("log", _validate_Options_log(o)))
	return errs.AsError()
}

func _validate_Options_idleDuration(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.idleDuration, "min=100ms,max=1m"); err != nil {
		return fmt461e464ebed9.Errorf("field `idleDuration` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_mngrPool(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.mngrPool, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `mngrPool` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_msgRepo(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.msgRepo, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `msgRepo` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_outbox(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.outbox, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `outbox` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_problemsRepo(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.problemsRepo, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `problemsRepo` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_txtor(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.txtor, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `txtor` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_log(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.log, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `log` did not pass the test: %w", err)
	}
	return nil
}
