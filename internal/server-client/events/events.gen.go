// Package clientevents provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package clientevents

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	"github.com/pershin-daniil/ninja-chat-bank/internal/types"
)

// Defines values for EventType.
const (
	EventTypeMessageBlockedEvent EventType = "MessageBlockedEvent"
	EventTypeMessageSentEvent    EventType = "MessageSentEvent"
	EventTypeNewMessageEvent     EventType = "NewMessageEvent"
)

// AuthorID defines model for AuthorID.
type AuthorID = types.UserID

// Event defines model for Event.
type Event struct {
	union json.RawMessage
}

// ID defines model for EventID.
type ID = types.EventID

// EventType defines model for EventType.
type EventType string

// MessageID defines model for MessageID.
type MessageID = types.MessageID

// MessageSentEvent defines model for MessageSentEvent.
type MessageSentEvent struct {
	ID        ID        `json:"eventId"`
	EventType EventType `json:"eventType"`
	MessageID MessageID `json:"messageId"`
	RequestID RequestID `json:"requestId"`
}

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	AuthorID  *AuthorID  `json:"authorId,omitempty"`
	Body      string     `json:"body"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	ID        ID         `json:"eventId"`
	EventType EventType  `json:"eventType"`
	IsService *bool      `json:"isService,omitempty"`
	MessageID MessageID  `json:"messageId"`
	RequestID RequestID  `json:"requestId"`
}

// RequestID defines model for RequestID.
type RequestID = types.RequestID

// AsMessageSentEvent returns the union data inside the Event as a MessageSentEvent
func (t Event) AsMessageSentEvent() (MessageSentEvent, error) {
	var body MessageSentEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageSentEvent overwrites any union data inside the Event as the provided MessageSentEvent
func (t *Event) FromMessageSentEvent(v MessageSentEvent) error {
	v.EventType = "MessageSentEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageSentEvent performs a merge with any union data inside the Event, using the provided MessageSentEvent
func (t *Event) MergeMessageSentEvent(v MessageSentEvent) error {
	v.EventType = "MessageSentEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewMessageEvent returns the union data inside the Event as a NewMessageEvent
func (t Event) AsNewMessageEvent() (NewMessageEvent, error) {
	var body NewMessageEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewMessageEvent overwrites any union data inside the Event as the provided NewMessageEvent
func (t *Event) FromNewMessageEvent(v NewMessageEvent) error {
	v.EventType = "NewMessageEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewMessageEvent performs a merge with any union data inside the Event, using the provided NewMessageEvent
func (t *Event) MergeNewMessageEvent(v NewMessageEvent) error {
	v.EventType = "NewMessageEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Event) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"eventType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Event) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "MessageSentEvent":
		return t.AsMessageSentEvent()
	case "NewMessageEvent":
		return t.AsNewMessageEvent()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Event) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RVy27bOhD9FWHuBbqRLKfdBNrlURRB0QSo21WQBS2NJSbSkCVHdgND/14MJT9iu0kM",
	"pAW6EkHO65w5o1lCbhprCIk9ZEvweYWNCsezlivjri7lPDOuUQwZtK0uIAZ+tAgZeHaaSojhZ1KahFQj",
	"l2u/4XqwlY8fffe485ToxhrHksUqriCDUnPVTke5aVKLzleakkKR1nVKmu5VkleKk6mih1QToyNVpyE4",
	"dF0MH+dIIVihfe50o0mxcSG6MxYdP173ZaIYfpPauhgM4c0Mstsl/O9wBhn8l254SQdS0i/ovSpxgsR9",
	"mi5+3uEaF4PPYH+3qvB4Wn9D6CraH2Y0EJUtAaltILuFXWQx7JGzvjqvTf6ARX97t4uyW9sdz8nG8RA1",
	"B1/fmJw91BuhaQxjFHR2VcjxOams+tjFW8p8jc9Kws2A9sVMG1q6GBz+aNG/or6vg+FlgC1u2mEhUlgB",
	"3C5hO/A2INH/rnT2GFP9D+TFktY/mi6GqSkexX5PW7lDxVic8RNtFYoxYd0gHJDj3+qY9hN0c53jVuFT",
	"Y2pU9M80dGBe+roJeOQUbxwPTfHB1zedYsGvaWZCGzTXkvtc0UM0aa1kiS4qxdFFrZE4Ch30EMMcndeG",
	"IIP5SVghFklZDRl8GJ2MxhCHyoKgU8/tVA4l9qsJZTVZ7t2vOGo9+mhmXFQioVOsqYwCx34U3XCFbqE9",
	"RpqjwqCndzyCkE8sDUmr4RPyRJJIn7w15PtRej8eyyc3xMOoKWtrnQfH9N5LAaul/yrtQmDrKYCbz4HE",
	"LgaPTmgJi/SpzSXOsTa2EQp7K4ihdTVksPBZmtYmV3VlPGen49NxuvCyK38FAAD//4X7+tidCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
