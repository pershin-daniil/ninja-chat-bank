package main

import (
	"bytes"
	"fmt"
	"go/format"
	"html/template"
	"log"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	if len(os.Args) != 4 {
		log.Fatalf("invalid args count: %d", len(os.Args)-1)
	}

	pkg, types, out := os.Args[1], strings.Split(os.Args[2], ","), os.Args[3]
	if err := run(pkg, types, out); err != nil {
		log.Fatal(err)
	}

	p, err := os.Getwd()
	if err != nil {
		log.Printf("failed to os.Getwd(): %v", err)
	}

	log.Printf("%v generated\n", filepath.Join(p, out))
}

var t = template.Must(template.New("typesGenerated").Parse(`// Code generated by cmd/gen-types; DO NOT EDIT.
package {{ .Package }}

import (
	"errors"
	"database/sql/driver"

	"github.com/google/uuid"
)

{{ range $, $typeName := .Types }}
var {{ $typeName }}Nil = {{ $typeName }}(uuid.Nil)

type {{ $typeName }} uuid.UUID                             //
func New{{ $typeName }}() {{ $typeName }}                  { return {{ $typeName }}(uuid.New()) }
func (t {{ $typeName }}) String() string                   { return uuid.UUID(t).String() }
func (t {{ $typeName }}) Value() (driver.Value, error)     { return t.String(), nil }
func (t *{{ $typeName }}) Scan(src any) error              { return (*uuid.UUID)(t).Scan(src) }
func (t {{ $typeName }}) MarshalText() ([]byte, error)     { return uuid.UUID(t).MarshalText() }
func (t *{{ $typeName }}) UnmarshalText(data []byte) error { return (*uuid.UUID)(t).UnmarshalText(data) }
func (t {{ $typeName }}) IsZero() bool                     { return t == {{ $typeName }}Nil }
func (t {{ $typeName }}) Matches(x any) bool {
	v, ok := x.({{ $typeName }})
	if !ok {
		return false
	}
	return t.String() == v.String()
}
func (t {{ $typeName }}) Validate() error {
	if t.IsZero() {
		return errors.New("zero {{ $typeName }}")
	}
	return nil
}
func (t {{ $typeName }}) AsPointer() *{{ $typeName }} {
	if t.IsZero() {
		return nil
	}
	return &t
}
{{ end }}

type TypeSet = interface {
	{{ .TypeSet }}
}

func Parse[T TypeSet](s string) (T, error) {
	v, err := uuid.Parse(s)
	return T(v), err
}

func MustParse[T TypeSet](s string) T {
	return T(uuid.MustParse(s))
}
`))

func run(pkg string, types []string, outFile string) error {
	var b bytes.Buffer
	if err := t.Execute(&b, struct {
		Package string
		Types   []string
		TypeSet string
	}{
		Package: pkg,
		Types:   types,
		TypeSet: strings.Join(types, " | "),
	}); err != nil {
		return fmt.Errorf("failed to execute tmpl: %v", err)
	}

	data, err := format.Source(b.Bytes())
	if err != nil {
		log.Println(b.String())
		return fmt.Errorf("go fmt: %v", err)
	}

	return os.WriteFile(outFile, data, 0o644) //nolint:gosec // rw-r--r--
}
