package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	if len(os.Args) != 4 {
		log.Fatalf("invalid args count: %d", len(os.Args)-1)
	}

	pkg, types, out := os.Args[1], strings.Split(os.Args[2], ","), os.Args[3]
	if err := run(pkg, types, out); err != nil {
		log.Fatal(err)
	}

	p, err := os.Getwd()
	if err != nil {
		log.Printf("failed to os.Getwd(): %v", err)
	}

	log.Printf("%v generated\n", filepath.Join(p, out))
}

func run(pkg string, types []string, outFile string) error {
	if len(types) == 0 {
		return nil
	}

	builder := strings.Builder{}
	builder.WriteString(fmt.Sprintf(headersAndCommonTmpl, pkg))

	for _, arg := range types {
		if arg == "" {
			continue
		}

		builder.WriteString(fmt.Sprintf(idDeclarationAndMethodsTmpl, arg))
	}

	file, err := os.Create(outFile)
	if err != nil {
		return fmt.Errorf("failed to create gen output file: %v", err)
	}

	_, err = file.WriteString(builder.String())
	if err != nil {
		return fmt.Errorf("failed to write to file: %v", err)
	}

	if err = file.Close(); err != nil {
		return fmt.Errorf("failed to close file: %v", err)
	}
	return nil
}

const headersAndCommonTmpl = `
// Code generated by cmd/gen-types; DO NOT EDIT.
package %s

import (
	"database/sql/driver"
	"encoding"
	"errors"
	"github.com/google/uuid"
)

var (
	ErrEntityIsNil     = errors.New("entity is nil")
	ErrUnparsableValue = errors.New("unparsable value")
	ErrZeroID          = errors.New("id is zero")
)

func Parse[T any](s string) (T, error) {
	var val T

	if v, ok := any(&val).(encoding.TextUnmarshaler); ok {
		err := v.UnmarshalText([]byte(s))
		return val, err
	}

	return val, ErrUnparsableValue
}

func MustParse[T any](s string) T {
	res, err := Parse[T](s)

	if err != nil {
		panic(err)
	}

	return res
}
`

const idDeclarationAndMethodsTmpl = `
type %[1]s uuid.UUID

var %[1]sNil = %[1]s(uuid.Nil)

func New%[1]s() %[1]s {
	return %[1]s(uuid.New())
}

func (id %[1]s) String() string {
	return uuid.UUID(id).String()
}

func (id %[1]s) MarshalText() ([]byte, error) {
	return []byte(uuid.UUID(id).String()), nil
}

func (id *%[1]s) UnmarshalText(text []byte) error {
	if id == nil {
		return ErrEntityIsNil
	}

	val, err := uuid.ParseBytes(text)
	if err != nil {
		return err
	}

	*id = %[1]s(val)

	return nil
}

func (id %[1]s) Value() (driver.Value, error) {
	return uuid.UUID(id).Value()
}

func (id *%[1]s) Scan(src any) error {
	if id == nil {
		return ErrEntityIsNil
	}

	val := uuid.Nil

	if err := val.Scan(src); err != nil {
		return err
	}

	*id = %[1]s(val)

	return nil
}

func (id %[1]s) Validate() error {
	if id.IsZero() {
		return ErrZeroID
	}

	_, err := uuid.Parse(id.String())

	return err
}

func (id %[1]s) Matches(x any) bool {
	switch x.(type) {
	case %[1]s:
		if id == x.(%[1]s) {
			return true
		}
	case *%[1]s:
		if x.(*%[1]s) != nil && id == *x.(*%[1]s) {
			return true
		}
	}

	return false
}

func (id %[1]s) IsZero() bool {
	return id.String() == "" || id == %[1]sNil
}
`
