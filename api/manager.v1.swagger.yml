openapi: 3.0.3
info:
  title: Bank Support Chat Manager API
  version: v1

servers:
  - url: http://localhost:8081/v1
    description: Development server

paths:
  /sendMessage:
    post:
      description: Send new message to the chat.
      parameters:
        - $ref: "#/components/parameters/XRequestIDHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendMessageRequest"
      responses:
        '200':
          description: Message created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendMessageResponse"

  /closeChat:
    post:
      description: Mark problem as solved and close chat
      parameters:
        - $ref: "#/components/parameters/XRequestIDHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CloseChatRequest"
      responses:
        '200':
          description: Chat closed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloseChatResponse"

  /getChats:
    post:
      description: Get the list of chats with open problems.
      parameters:
        - $ref: "#/components/parameters/XRequestIDHeader"
      responses:
        '200':
          description: Chats list.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetChatsResponse"

  /getChatHistory:
    post:
      description: Get chat history.
      parameters:
        - $ref: "#/components/parameters/XRequestIDHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetChatHistoryRequest"
      responses:
        '200':
          description: Messages list.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetChatHistoryResponse"

  /getFreeHandsBtnAvailability:
    post:
      description: Check availability of "Free Hands" button.
      parameters:
        - $ref: "#/components/parameters/XRequestIDHeader"
      responses:
        '200':
          description: Button availability flag.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFreeHandsBtnAvailabilityResponse"

  /freeHands:
    post:
      description: Send a signal that I'm ready to deal with new problems.
      parameters:
        - $ref: "#/components/parameters/XRequestIDHeader"
      responses:
        '200':
          description: No data on success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FreeHandsResponse"

security:
  - bearerAuth: [ ]

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    XRequestIDHeader:
      in: header
      name: X-Request-ID
      schema:
        type: string
        format: uuid
        x-go-type: types.RequestID
        x-go-import:
          path: "github.com/pershin-daniil/ninja-chat-bank/internal/types"
      required: true

  schemas:
    # Common.

    ChatId:
      required: [ chatId ]
      properties:
        chatId:
          type: string
          format: uuid
          x-go-type: types.ChatID
          x-go-type-import:
            path: "github.com/pershin-daniil/ninja-chat-bank/internal/types"

    Error:
      required: [ message, code ]
      properties:
        code:
          $ref: "#/components/schemas/ErrorCode"
        message:
          type: string
        details:
          type: string

    ErrorCode:
      type: integer
      description: contains HTTP error codes and specific business logic error codes (the last must be >= 1000).
      enum:
        - 5000
        - 5001
      x-enum-varnames:
        - ErrorCodeManagerOverloaded
        - ErrorCodeNoActiveProblemInChat
      minimum: 400

    NullDataResponse:
      properties:
        data:
          type: null
        error:
          $ref: '#/components/schemas/Error'

    # /getFreeHandsBtnAvailability

    GetFreeHandsBtnAvailabilityResponse:
      properties:
        data:
          $ref: "#/components/schemas/FreeHandsBtnAvailability"
        error:
          $ref: "#/components/schemas/Error"

    FreeHandsBtnAvailability:
      required: [ available ]
      properties:
        available:
          type: boolean

    # /freeHands

    FreeHandsResponse:
      properties:
        data:
          type: object
        error:
          $ref: "#/components/schemas/Error"


    # /getChats

    GetChatsResponse:
      properties:
        data:
          $ref: "#/components/schemas/ChatList"
        error:
          $ref: "#/components/schemas/Error"

    ChatList:
      required: [ chats ]
      properties:
        chats:
          type: array
          items: { $ref: "#/components/schemas/Chat" }

    Chat:
      allOf:
        - $ref: "#/components/schemas/ChatId"
        - type: object
          required: [ clientId ]
          properties:
            clientId:
              type: string
              format: uuid
              x-go-type: types.UserID
              x-go-type-import:
                path: "github.com/pershin-daniil/ninja-chat-bank/internal/types"

 # /getChatHistory

    GetChatHistoryRequest:
      required: [ chatId ]
      properties:
        chatId:
          type: string
          format: uuid
          x-go-type: types.ChatID
          x-go-type-import:
            path: "github.com/pershin-daniil/ninja-chat-bank/internal/types"
        pageSize:
          type: integer
          minimum: 10
          maximum: 100
        cursor:
          type: string


    GetChatHistoryResponse:
      properties:
        data:
          $ref: "#/components/schemas/MessagesPage"
        error:
          $ref: "#/components/schemas/Error"

    MessagesPage:
      required: [ messages, next ]
      properties:
        messages:
          type: array
          items: { $ref: "#/components/schemas/Message" }
        next:
          type: string

    Message:
      required: [ id, authorId, body, createdAt, isReceived ]
      properties:
        id:
          type: string
          format: uuid
          x-go-type: types.MessageID
          x-go-type-import:
            path: "github.com/pershin-daniil/ninja-chat-bank/internal/types"
        authorId:
          type: string
          format: uuid
          x-go-type: types.UserID
          x-go-type-import:
            path: "github.com/pershin-daniil/ninja-chat-bank/internal/types"
        body:
          type: string
        createdAt:
          type: string
          format: date-time
        isReceived:
          type: boolean

    # /sendMessage

    SendMessageRequest:
      allOf:
        - $ref: "#/components/schemas/ChatId"
        - type: object
          required: [ messageBody ]
          properties:
            messageBody:
              type: string
              minLength: 1
              maxLength: 3000

    SendMessageResponse:
      properties:
        data:
          $ref: "#/components/schemas/MessageWithoutBody"
        error:
          $ref: "#/components/schemas/Error"

    MessageWithoutBody:
      required: [ id, authorId, createdAt ]
      properties:
        id:
          type: string
          format: uuid
          x-go-type: types.MessageID
          x-go-type-import:
            path: "github.com/pershin-daniil/ninja-chat-bank/internal/types"
        authorId:
          type: string
          format: uuid
          x-go-type: types.UserID
          x-go-type-import:
            path: "github.com/pershin-daniil/ninja-chat-bank/internal/types"
        createdAt:
          type: string
          format: date-time


    # /closeChat

    CloseChatRequest:
      $ref: "#/components/schemas/ChatId"

    CloseChatResponse:
      $ref: "#/components/schemas/NullDataResponse"